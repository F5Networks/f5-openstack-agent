#!/bin/bash
### BEGIN INIT INFO
# Provides:             f5-openstack-agent
# Required-Start:       $remote_fs $syslog
# Required-Stope:       $remote_fs $syslog
# Should-Start:         keystone neutron-server
# Should-Stop:          keystone neutron-server
# Default-Start:        2 3 4 5
# Default-Stop:         0 1 6
# Short-Description:    f5-openstack-agent
# Description:          Provides the F5® OpenStack agent to configure BIG-IP®
### END INIT INFO

PROJECT_NAME=neutron
NAME=f5-oslbaasv2-agent
SERVICE=f5-oslbaasv2-agent
SCRIPTNAME="/etc/init.d/${NAME}"
NEUTRON_CONF="/etc/neutron/neutron.conf"
F5_AGENT_CONF="/etc/neutron/services/f5/f5-openstack-agent.ini"
STARTDAEMON_ARGS=""
DEPEND_RETURN=''
DEPEND_EXIT=''

[ -r "${F5_AGENT_CONF}" ] && DAEMON_ARGS="${DAEMON_ARGS} --config-file ${F5_AGENT_CONF}"
[ -r "${NEUTRON_CONF}" ] && DAEMON_ARGS="${DAEMON_ARGS} --config-file ${NEUTRON_CONF}"

PATH=/sbin:/user/sbin:/bin:/usr/bin

if [ -x "/usr/local/bin/${NAME}" ]; then
	DAEMON="/usr/local/bin/${NAME}"
else
	DAEMON="/usr/bin/${NAME}"
fi

if [ -z "${SYSTEM_USER}" ]; then
    id ${PROJECT_NAME} >/dev/null 2>&1
    if [[ $? == 0 ]]; then
	SYSTEM_USER=${PROJECT_NAME}
	STARTDAEMON_ARGS=" --USER ${SYSTEM_USER}"
    else
	SYSTEM_USER=$(whoami)
    fi
    if [ "${SYSTEM_USER}" != "root" ]; then
	SYSTEM_GROUP=${SYSTEM_USER}
	STARTDAEMON_CHUID="--chuid ${SYSTEM_USER}"
    fi
fi

PIDFILE="/var/run/${PROJECT_NAME}/${NAME}.pid"
STARTDAEMON_ARGS=" --start  $STARTDAEMON_CHUID --background --make-pidfile --pidfile ${PIDFILE}"
[ -x $DAEMON ] || exit 4

# If ran as root, create /var/lock/X, /var/run/X, /var/lib/X and /var/log/X as needed
for i in lock run log lib ; do
    mkdir -p /var/$i/${PROJECT_NAME}
    chown ${SYSTEM_USER} /var/$i/${PROJECT_NAME}
done

STARTDAEMON_ARGS=${STARTDAEMON_ARGS}" --chdir /var/lib/${PROJECT_NAME}"
. /lib/lsb/init-functions

LOCKFILE=/var/lock/neutron/${NAME}

# Manage log options: logfile and/or syslog, depending on user's choosing
LOGFILE="/var/log/${PROJECT_NAME}/${NAME}.log"
[ -r /etc/default/openstack ] && . /etc/default/openstack
[ -r /etc/default/$NAME ] && . /etc/default/$NAME
[ "x$USE_SYSLOG" = "xyes" ] && DAEMON_ARGS="$DAEMON_ARGS --use-syslog"
[ "x$USE_LOGFILE" != "xno" ] && DAEMON_ARGS="$DAEMON_ARGS --log-file=$LOGFILE"

function log_initializing_msg() {
    msg="Initializing ${ACTION} on ${NAME}..."
    logger "${msg}"
    echo "${msg}"
}

function log_failure_msg() {
    msg="Failed in action to ${ACTION} ${NAME}!"
    if [ "$1" != "" ]; then
        msg="${msg} ($1)"
    fi
    logger "${msg}"
    echo "${msg}"
}

function log_success_msg() {
    msg="Succeeded in action to ${ACTION} ${NAME}!"
    logger "${msg}"
    echo "${msg}"
}

function log_error_msg() {
    msg="$@"
    logger "${msg}"
    echo "${msg}"
}

function log_exit_status() {
    case "$1" in
    0)
        log_error_msg "(0) Service ${NAME} is in an OK Status!"
        ;;
    1)
        log_error_msg "(1) Service ${NAME} is dead and /var/run pid file exists!"
        ;;
    2)
        log_error_msg "(2) Service ${NAME} is dead and /var/lock lock file exists!"
        ;;
    3)
        log_error_msg "(3) Service ${NAME} is not running!"
        ;;
    *) # 4 is unknown status and above is not specified!
        log_error_msg "(4) Service ${NAME} status is unknown!"
        ;;
    esac
    exit $1
}

function log_exit_non_status() {
    if [ $1 -eq 0 ]; then
        log_success_msg
        exit $1
    fi
    case "$1" in
    1)
        log_error_msg "(1) An Unknown Error has occurred!"
        ;;
    2)
        log_error_msg "(2) Invalid or excess argument(s)!"
        ;;
    3)
        log_error_msg "(3) Unimplemented feature ($ACTION)!"
        ;;
    4)
        log_error_msg "(4) User had insufficient priviledges!"
        ;;
    5)
        log_error_msg "(5) Program is not installed!"
        ;;
    6)
        log_error_msg "(6) Program is not configured!"
        ;;
    7)
        log_error_msg "(7) Program is not running!"
        ;;
    *)
        log_error_msg "($1) An unspecified error type has occurred!"
        ;;
    esac
    log_failure_msg
    exit $1
}

function depend() {
    python_require="import f5_openstack_agent.lbaas.drivers.bigip.setup"
    DEPEND_RETURN=$(/usr/bin/env python -c ${python_require})
    DEPEND_EXIT=$?
    if [ "$?" -eq 0 ]; then
        log_error_msg "All python dependencies for ${NAME} met"
    else
        log_error_smg "${DEPEND_RETURN}"
    fi
}

agent_start() {
    depend
    if [ "${DEPEND_EXIT}" ==  0 ]; then
        start_cmd="start-stop-daemon ${STARTDAEMON_ARGS} --exec ${DAEMON}  -- ${DAEMON_ARGS}"
        eval $start_cmd
        retval=$?

        [ $retval -eq 0 ] && touch $LOCKFILE
    else
        retval=$DEPEND_EXIT
    fi
}

agent_stop() {
    start-stop-daemon --stop --quiet -p $PIDFILE --retry=TERM/30/KILL/5
    retval=$?

    [ $retval -eq 0 ] && rm -f $lockfile
    rm -rf $PIDFILE
}

agent_restart() {
    agent_stop
    agent_start
}

reload() {
    agent_restart
}

force_reload() {
    agent_restart
}

rh_status() {
    if [ ! -f $PIDFILE ]; then
	return 3
    fi

    pid=$(cat $PIDFILE)
    if ! ps --no-headers p "$pid" | grep ${NAME} > /dev/null; then
	return 1
    fi

    start-stop-daemon --status -p $PIDFILE
    retval=$?
}

rh_status_q() {
    rh_status >/dev/null 2>&1
}

log_initializing_msg
case "$1" in
    start)
        agent_start
        log_exit_non_status ${retval}
        ;;
    stop)
        agent_stop
        log_exit_non_status ${retval}
        ;;
    restart)
        agent_restart
        log_exit_non_status ${retval}
        ;;
    reload)
        reload
        log_exit_non_status ${retval}
        ;;
    force-reload)
        force_reload
        log_exit_non_status ${retval}
        ;;
    status)
	    rh_status
        log_exit_status ${retvalval}
        ;;
    condrestart|try-restart)
        rh_status_q || exit 0
        agent_restart
        ;;
    *)
        log_daemon_msg $"Usage: $0 {start|stop|status|restart|condrestart|try-restart|reload|force-reload}"
        log_exit_non_status 4
esac
exit $?
