# coding=utf-8
# Copyright (c) 2017,2018, F5 Networks, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

import mock
import pytest

import conftest
import test_icontrol_driver
import test_plugin_rpc

from f5_openstack_agent.lbaasv2.drivers.bigip import agent_manager

import class_tester_base_class
import mock_builder_base_class


@pytest.fixture
@mock.patch('f5_openstack_agent.lbaasv2.drivers.bigip.agent_manager.'
            'LbaasAgentManager._setup_rpc')
@mock.patch('f5_openstack_agent.lbaasv2.drivers.bigip.agent_manager.'
            'importutils.import_object')
def agent_mgr_setup(mock_importutils, mock_setup_rpc):
    return agent_manager.LbaasAgentManager(mock.MagicMock(name='conf'))


@pytest.mark.skip(reason="Mocked RPC breaks initialization")
@mock.patch('f5_openstack_agent.lbaasv2.drivers.bigip.agent_manager.LOG')
def test_update_fdb_entries(mock_log, agent_mgr_setup):
    '''When func is called in agent_manager, it prooduces a warning message.'''

    agent_mgr_setup.update_fdb_entries('', '')
    warning_msg = "update_fdb_entries: the LBaaSv2 Agent does not handle an " \
        "update of the IP address of a neutron port. This port is generally " \
        "tied to a member. If the IP address of a member was changed, be " \
        "sure to also recreate the member in neutron-lbaas with the new " \
        "address."
    assert mock_log.warning.call_args == mock.call(warning_msg)


class TestLbaasAgentManagerMockBuilder(mock_builder_base_class.MockBuilderBase,
                                       conftest.TestingWithServiceConstructor):
    """Builder class for Mock objects that mock LbaasAgentManager

    This class builds mock-module class objects for isolation of the
    LbaasAgentManager.  As such, all reference to `target` are pointing to
    either an instantiated instance of LbaasAgentManager or is a mocked
    instance of this class.

    Use:
        class Tester(object):
            my_mock_builder = TestLbaasAgentManagerMockBuilder
            standalone = TestLbaasAgentManagerMockBuilder.standalone
            neutron_only = TestLbaasAgentManagerMockBuilder.neutron_only
            bigip_only = TestLbaasAgentManagerMockBuilder.bigip_only
            fully_int = TestLbaasAgentManagerMockBuilder.fully_int
            fixture = my_mock_builder.fixture

            def test_foo(fixture):
                # this then uses the pytest.fixture fixture from MockBuilder
    """
    # non-instantiated
    _other_builders = dict(
        lbdriver=test_icontrol_driver.TestiControlDriverMockBuilder,
        plugin_rpc=test_plugin_rpc.TestPluginRpcMockBuilder)

    @staticmethod
    def mocked_target(*args):
        """Build a Mock target that totally skips the __init__ method

        This is typically a building block that builds just an instantiated
        instance of target that has limited to no attibute quality that is
        otherwise generated by fully_mocked_target().

        Thus, the return is a partially-completed dead-end Target object
        instance.
        """
        with mock.patch(
                'f5_openstack_agent.lbaasv2.drivers.bigip.agent_manager.'
                'LbaasAgentManager.__init__') as my_init:
            my_init.return_value = None
            conf = mock.Mock()
            new_target = agent_manager.LbaasAgentManager(conf)
            new_target.conf = conf
        return new_target

    def fully_mocked_target(self, mocked_target):
        """Creates a mocked target that mocks all lower other_builders' targets

        This does not mean that the caller's black-box is limited to this
        target, but can drill further using a system of either mocks or
        non-mocks.  Please see conftest.MockBuilder for details.
        """
        # Mock() objects here should be filled in with the appropriate mocks...
        mocked_target.context = 'context'
        mocked_target.serializer = None
        mocked_target.cache = mock.Mock()
        mocked_target.last_resync = mock.Mock()
        mocked_target.needs_resync = False
        mocked_target.plugin_rpc = \
            self.other_builders['plugin_rpc'].new_fully_mocked_target()
        mocked_target.tunnel_rpc = mock.Mock()
        mocked_target.l2_pop_rpc = mock.Mock()
        mocked_target.state_rpc = mock.Mock()
        mocked_target.pending_services = {}
        mocked_target.service_resync_interval = 5
        mocked_target.lbdriver = \
            self.other_builders['lbdriver'].new_fully_mocked_target()
        mocked_target.agent_host = 'conf.host:agent_hash'
        agent_configurations = (
            {'environment_prefix': 'environment_prefix',
             'environment_group_number': 'environment_group_number',
             'global_routed_mode': 'f5_global_routed_mode'}
        )

        mocked_target.agent_state = {
            'binary': 'AGENT_BINARY_NAME',
            'host': mocked_target.agent_host,
            'topic': 'TOPIC_LOADBALANCER_AGENT_V2',
            'agent_type': 'AGENT_TYPE_LOADBALANCERV2',
            'l2_population': 'l2_population',
            'start_flag': True,
            'configurations': agent_configurations
        }
        mocked_target.endpoints = mocked_target
        mocked_target.connection = mock.Mock()
        return mocked_target

    def new_fully_mocked_target(self):
        return self.fully_mocked_target(self.mocked_target())


# replace the name to LBaasmAgentManagerClassMocker as decided by team
class LBaasAgentManagerMocker(object):
    """To-be Instantiated Mocker class that tracks 'frozen' code space

    This class is meant to be a code-space tracker element that tracks code
    space variables and pointers to keep original code space elements in tact.
    Upon setUp of a test instance, the fixtures here will create and replace
    the code space elements with either mocks or temporary variables.  Upon
    tearDown, these frozen code space elements are restored and mocks and
    temporary variables are restored.

    Using this class's methods should be limited to global-code-space libraries
    imported from Python standard libraries or pip-hosted libraries.  NOT
    F5-controlled libraries within this repo.  Those should be handled and
    built by the appropriate MockBuilder classes within the modules that
    target the class to be mocked.
    """

    @pytest.fixture
    def mock_logger(self):
        """Mocks the target's logger element for caller's use in testing"""
        my_logger = mock.Mock()
        self.freeze_logger = agent_manager.LOG
        self.logger = my_logger
        agent_manager.LOG = my_logger

    def teardown(self):
        """Performs teardown operations dynamically to catch fixtures used"""
        if hasattr(self, 'freeze_logger'):
            agent_manager.LOG = self.freeze_logger


class TestLbaasAgentManager(LBaasAgentManagerMocker,
                            class_tester_base_class.ClassTesterBase):
    """Tester class that tests the AgentManager

    Tests under this tester class should test the code in agent_manager.py and
    encompass both fully-comprehensive white-box tests (fcwb) and some black-
    box tests (bb).  Black-box tests should provide information on where they
    are limited to in the pydoc for the method.
    """
    # this is not instantiated
    builder = TestLbaasAgentManagerMockBuilder
    # fixtures hosted by builder (add more if needed):
    # standalone_builder = TestLbaasAgentManagerMockBuilder.standalone_builder
    # mocked_target = my_builder.mocked_target
    # NOTE: in the above list, do not add mock_{method}'s as these cannot be
    # fixtures because they are instantiated!

    def test_fcwb_clean_orphaned_objects_and_save_device_config(
            self, standalone_builder, fully_mocked_target, mock_logger):
        """Performs fully-comprehensive testing for this method

        White-box test for:
            agent_manager.LBaasAgentManager.\
                clean_orphaned_objects_and_save_device_config
        That verfies grammar and "freezes" logic.
        """
        target = fully_mocked_target

        def no_global_agent_exists(self, builder, target):
            plugin_rpc_get_clusterwide_agent_retval = dict()
            get_clusterwide_agent_expected = \
                tuple([target.conf.environment_prefix,
                       target.conf.environmentgroup_number])
            builder.mock_other_builders_method(
                target, 'get_clusterwide_agent', targets_attr='plugin_rpc',
                call_cnt=1, expected_args=get_clusterwide_agent_expected,
                return_value=plugin_rpc_get_clusterwide_agent_retval)
            assert target.clean_orphaned_objects_and_save_device_config()
            builder.check_mocks(target)

        def global_agent_exists(self, builder, target):
            plugin_rpc_get_clusterwide_agent_retval = \
                dict(host=target.agent_host)
            get_clusterwide_agent_expected = \
                tuple([target.conf.environment_prefix,
                       target.conf.environmentgroup_number])
            builder.mock_other_builders_method(
                target, 'get_clusterwide_agent', targets_attr='plugin_rpc',
                call_cnt=1, expected_args=get_clusterwide_agent_expected,
                return_value=plugin_rpc_get_clusterwide_agent_retval)
            builder.mock_other_builders_method(
                target, 'backup_configuration', targets_attr='lbdriver',
                expected_args=None)
            builder.mock_all_get_all_deployed(target, return_value=[1])
            builder.mock_all_purges(target)
            assert not target.clean_orphaned_objects_and_save_device_config()
            builder.check_mocks(target)

        def global_agent_different_agent(self, builder, target):
            plugin_rpc_get_clusterwide_agent_retval = dict(host='not me')
            get_clusterwide_agent_expected = \
                tuple([target.conf.environment_prefix,
                       target.conf.environmentgroup_number])
            builder.mock_other_builders_method(
                target, 'get_clusterwide_agent', targets_attr='plugin_rpc',
                call_cnt=1, expected_args=get_clusterwide_agent_expected,
                return_value=plugin_rpc_get_clusterwide_agent_retval)
            assert target.clean_orphaned_objects_and_save_device_config()
            builder.check_mocks(target)

        no_global_agent_exists(self, standalone_builder, target)
        target = standalone_builder.new_fully_mocked_target()
        global_agent_exists(self, standalone_builder, target)
        target = standalone_builder.new_fully_mocked_target()
        global_agent_different_agent(self, standalone_builder, target)

    @pytest.mark.skip(reason='WIP')
    def test_pbb_clean_orphaned_objects_and_save_device_config(
            self, service_with_health_monitor, standalone_builder,
            fully_mocked_target):
        target = fully_mocked_target
        svc = service_with_health_monitor

        def down_to_plugin_rpc_functional(target, builder, svc):
            hosts = [target.agent_host]
            fake_bigip = mock.Mock()
            fake_bigip.status = 'active'
            fake_bigip.tm.sys.folders.folder.exist.return_value = True
            prefix = target.lbdriver.service_adapter.prefix
            fake_bigip.tm.sys.folders.get_collection.return_value = [
                prefix + svc['loadbalancer']['tenant_id']]
            # need to continue down the route of mocking _call() and
            # system_adapter
            for list_obj in ['listeners', 'pools', 'healthmonitors']:
                svc[list_obj]['hostnames'] = hosts
            svc['loadbalancer']['hostnames'] = hosts
            _calls_side_effect = [
                {'host': target.agent_host},
                {}]
            # we'll just mock... not really validate much...
            builder.mock_other_builders_method(
                target, '_call', targets_attr='plugin_rpc',
                side_effect=_calls_side_effect)

        down_to_plugin_rpc_functional(target, standalone_builder, svc)
